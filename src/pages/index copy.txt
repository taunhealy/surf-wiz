---
import Layout from '../layouts/Layout.astro';
import { beachData } from '../types/beaches';
import type { WindData } from '../types/wind';

// Function to check if current conditions match beach
function isBeachSuitable(beach: any, conditions: WindData) {
  // Check if current wind direction matches any of the optimal directions
  const hasGoodWind = beach.optimalWindDirections.includes(conditions.wind.direction);
  
  // Check swell height (example thresholds)
  const hasGoodSwell = conditions.swell.height >= 1.5 && conditions.swell.height <= 4;

  return hasGoodWind && hasGoodSwell;
}

// Get initial wind data
let windData: WindData | null = null;
try {
  const response = await fetch('http://localhost:4321/api/surf-conditions', {
    headers: {
      'Accept': 'application/json'
    }
  });
  if (!response.ok) throw new Error('Network response was not ok');
  windData = await response.json();
} catch (error) {
  console.error('Failed to fetch initial wind data:', error);
}
---

<Layout>
  <main>
    <h1>Cape Town Surf Spots</h1>
    <div class="wind-card">
      <div class="conditions">
        <div class="condition-item">
          <label>Wind Direction:</label>
          <span id="windDirection">
            {windData ? windData.wind.direction : 'Loading...'}
          </span>
        </div>
        <div class="condition-item">
          <label>Wave Height:</label>
          <span id="waveHeight">
            {windData ? `${windData.swell.height}m` : ''}
          </span>
        </div>
        <div class="condition-item">
          <label>Swell Period:</label>
          <span id="swellPeriod">
            {windData ? `${windData.swell.period}s` : ''}
          </span>
        </div>
      </div>
      <div class="timestamp" id="timestamp">
        {windData ? `Last updated: ${new Date(windData.timestamp).toLocaleString()}` : ''}
      </div>
      <button id="refreshButton">Refresh</button>
    </div>

    <div class="beaches-table">
      <table>
        <thead>
          <tr>
            <th>Beach</th>
            <th>Current Status</th>
            <th>Optimal Winds</th>
            <th>Difficulty</th>
            <th>Wave Type</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          {beachData.map(beach => (
            <tr class={windData && isBeachSuitable(beach, windData) ? 'suitable' : ''}>
              <td>{beach.name}</td>
              <td class="status">
                {windData && isBeachSuitable(beach, windData) 
                  ? 'üèÑ‚Äç‚ôÇÔ∏è Good to go!' 
                  : '‚ö†Ô∏è Not optimal'}
              </td>
              <td>{beach.optimalWindDirections.join(', ')}</td>
              <td>{beach.difficulty}</td>
              <td>{beach.waveType}</td>
              <td>{beach.description}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>

    <script>
      const refreshButton = document.getElementById('refreshButton');
      
      async function fetchWindDirection() {
        try {
          const response = await fetch('/api/surf-conditions', {
            headers: {
              'Accept': 'application/json'
            }
          });
          
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();
          
          // Update display elements
          const windDirectionEl = document.getElementById('windDirection');
          const waveHeightEl = document.getElementById('waveHeight');
          const swellPeriodEl = document.getElementById('swellPeriod');
          const timestampEl = document.getElementById('timestamp');
          
          if (windDirectionEl && data?.wind?.direction) {
            windDirectionEl.textContent = data.wind.direction;
          }
          
          if (waveHeightEl && data?.swell?.height) {
            waveHeightEl.textContent = `${data.swell.height}m`;
          }
          
          if (swellPeriodEl && data?.swell?.period) {
            swellPeriodEl.textContent = `${data.swell.period}s`;
          }

          if (timestampEl && data?.timestamp) {
            timestampEl.textContent = `Last updated: ${new Date(data.timestamp).toLocaleString()}`;
          }

          // Update beach suitability
          document.querySelectorAll('tbody tr').forEach(row => {
            const optimalWindsCell = row.querySelector('td:nth-child(3)');
            const statusCell = row.querySelector('td:nth-child(2)');
            
            if (!optimalWindsCell || !statusCell) return;
            
            const optimalWinds = optimalWindsCell.textContent?.split(', ') || [];
            const currentWind = data?.wind?.direction || '';
            
            // Check if current wind matches any optimal wind directions
            const isSuitable = currentWind && optimalWinds.some(wind => 
              currentWind === wind
            );
            
            row.classList.toggle('suitable', isSuitable);
            statusCell.textContent = isSuitable ? 'üèÑ‚Äç‚ôÇÔ∏è Good to go!' : '‚ö†Ô∏è Not optimal';
          });
        } catch (error) {
          console.error('Error:', error);
          const windDirectionEl = document.getElementById('windDirection');
          if (windDirectionEl) {
            windDirectionEl.textContent = 'Error fetching data';
          }
        }
      }

      // Only add event listener if button exists
      if (refreshButton) {
        refreshButton.addEventListener('click', fetchWindDirection);
        // Initial fetch
        fetchWindDirection();
      }
    </script>
  </main>
</Layout>

<style>
  main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 2rem;
  }

  .wind-card {
    text-align: center;
    background: white;
    padding: 2rem;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
  }

  .conditions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .condition-item {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1.5rem;
  }

  .condition-item label {
    font-weight: bold;
    color: #666;
  }

  .condition-item span {
    color: #333;
  }

  .beaches-table {
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  th, td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #eee;
  }

  th {
    background: #f5f5f5;
    font-weight: 600;
  }

  tr.suitable {
    background: #e6ffe6;
  }

  .status {
    font-weight: 500;
  }

  button {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  button:hover {
    background: #2563eb;
  }

  @media (max-width: 768px) {
    .beaches-table {
      overflow-x: auto;
    }
    
    main {
      padding: 1rem;
    }
  }
</style>